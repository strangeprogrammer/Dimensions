/*Test strings:
(aA>zA<)(&F#F~F@)(#~@)(0987654321+)(0-)(%)(Â£)($)([)([)([)(1-)(])(])(])([)(])(/)
([)(])


*/

/*
Invoke parser with:
Parser parser;
parser.parse();
*/

%scanner "flexcpp/Scanner.hpp"
%default-actions std

%token LPAREN RPAREN MFORE MBACK VSTORE VFORE VBACK VZERO PLUS MINUS INASCII OUTNUM OUTASCII WHILE ENDWHILE NOOP NUMBER LETTER DONE
%start input

%union {
	bool				BOOL;
}
%type <BOOL> polarity

%%
input
: commands DONE {
	env.append(new halt());
	ACCEPT();
}
;

commands
: commands command
| /*empty*/
;

command
: action {
	env.append(env.next);
	env.next=NULL;
}
| WHILE {
	env.append(new tzj()).jpush();
} commands ENDWHILE {
	env.append(new jmp()).jpop();
}
;

action
: enclosed
| LPAREN nonenclosed RPAREN
;

enclosed
: INASCII {
	env.next=new ExecBlocks::getc();
}
| OUTNUM {
	env.next=new putn();
}
| OUTASCII {
	env.next=new ExecBlocks::putc();
}
| NOOP {
	env.next=new noop();
}
;

nonenclosed
: motion
| store_velocity
| literal_velocity
| arithmetic
;

motion
: letters MFORE letters MBACK {
	Axes* A=env.vectors.backpop();
	Axes* B=env.vectors.backpop();
	KVP<unsigned long,long>* temp;
	while(temp=B->rmmin()){
		A->set(temp->key,-1);
		delete temp;
	}
	delete B;
	env.next=new mov(A);
}
;

store_velocity
: VSTORE velocity {
	env.next=new strv(env.vectors.backpop());
}
;

literal_velocity
: velocity {
	env.next=new setv(env.vectors.backpop());
}
;

velocity
: letters VFORE letters VBACK letters VZERO {
	Axes* A=env.vectors.backpop();
	Axes* B=env.vectors.backpop();
	Axes* C=env.vectors.backpop();
	KVP<unsigned long,long>* temp;
	while(temp=B->rmmin()){
		A->set(temp->key,-1);
		delete temp;
	}
	delete B;
	while(temp=C->rmmin()){
		A->set(temp->key,0);
		delete temp;
	}
	delete C;
	env.vectors.frontpush(A);
}
;

letters
: letters LETTER {
	env.vectors.backpeek()->set(d_scanner.matched()[0],1);
}
| /*empty*/ {
	env.vectors.frontpush(new Axes());
}
;

arithmetic
: numeric polarity {
	Number* temp=env.numbers.backpop();
	Instruction* succ;
	if($2){
		succ=new add(temp);
	}else{
		succ=new sub(temp);
	}
	env.next=succ;
}
;

numeric
: NUMBER {
	env.numbers.frontpush(new Number(std::stol(d_scanner.matched(),NULL,10)));
}
;

polarity
: PLUS {
	$$=true;
}
| MINUS {
	$$=false;
}
;
