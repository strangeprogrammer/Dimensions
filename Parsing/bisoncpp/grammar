//Test string: (abcdefghijklmnopqrstuvwxyz>abcdefghijklmnopqrstuvwxyz<)(&#~@)(0987654321+)(0-)(%)(Â£)($)([)(1-)(])(/)

//For debugging purposes only
%print-tokens

%scanner "../flexcpp/Scanner.hpp"
%token LPAREN RPAREN MFORE MBACK VSTORE VFORE VBACK VZERO PLUS MINUS INASCII OUTNUM OUTASCII LBRKT RBRKT NOOP NUMBER LETTERS
%start commands

/*
Invoke parser with:
Parser parser;
parser.parse();
*/

%%
commands
: /*empty*/ {
	#ifdef DEBUG
	std::cout << "TERMINATOR" << std::endl;
	#endif //DEBUG
}
| commands command /*{
	env->progend->appendNext($2);
	env->progend=env->progend->next;
	if(env->resolve){
		env->resolve->backpop()->d->target=env->progend;
	}
}*/
;

command
: LPAREN action RPAREN /*{
	$$=$2;
}*/
| while /*{
}*/ commands endwhile /*{
}*/
;

while
: LPAREN LBRKT RPAREN /*{
	tzj* temp=new tzj();
	env->jstack->frontpush(temp);
	$$=temp;
}*/
;

endwhile
: LPAREN RBRKT RPAREN /*{
	jmp* temp=new jmp();
	tzj* ret=env->jstack->frontpop();
	temp->d->target=ret;
	env->resolve->frontpush(ret);
	$$=temp;
}*/
;

action
: motion		//{$$=$1;}
| literal_velocity	//{$$=$1;}
| store_velocity	//{$$=$1;}
| arithmetic		//{$$=$1;}
| input			//{$$=$1;}
| output		//{$$=$1;}
| noop			//{$$=$1;}
;

letters
: LETTERS /*{
}*/
| /*empty*/ /*{
}*/
;

motion
: letters MFORE /*{
	//Do something
}*/ letters MBACK /*{
	//Do something else
}*/
;

literal_velocity
: velocity /*{
	//Do something
}*/
;

store_velocity
: VSTORE velocity /*{
	//Do something
}*/
;

velocity
: letters /*{
	//Do something
}*/ VFORE letters /*{
	//Do something else
}*/ VBACK letters /*{
	//Do something else else
}*/ VZERO
;

arithmetic
: NUMBER PLUS /*{
	add* temp=new add();
	temp->d->number=atoi(yyval);//Fix this so that it doesn't use 'yyval'
	$$=temp;
}*/
| NUMBER MINUS /*{
	sub* temp=new sub();
	temp->d->number=atoi(yyval);//Fix this so that it doesn't use 'yyval'
	$$=temp;
}*/
;

input
: INASCII /*{
	//Do something
}*/
;

output
: output_number /*{
	//Do something
}*/
| output_ascii /*{
	//Do something else
}*/
;

output_number
: OUTNUM /*{
	//Do something
}*/
;

output_ascii
: OUTASCII /*{
	//Do something
}*/
;

noop
: NOOP /*{
	//Do something
}*/
;
